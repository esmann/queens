#!/usr/bin/python 
# 
# This MiG python script was autogenerated by the MiG User Script Generator !!!
# Any changes should be made in the generator and not here !!!

import sys
import os
import getopt

def version():
	print "MiG User Scripts: $Revision: 1.32 $"

# end version

def check_var(name, var):

        if not var:
           print name + " not set! Please set in configuration file or through the command line"
           sys.exit(1)
# end version

def read_conf(conf, option):

        try:
            conf_file = open(conf, 'r')
            for line in conf_file.readlines():
                line = line.strip()
                # split on any whitespace and assure at least two parts
                parts = line.split() + ['', '']
                opt, val = parts[0], parts[1]
                if opt == option:
                    return val
            conf_file.close()
        except Exception, e:
            return ''

# end usage

def expand_name(path_list, server_flags, destinations):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl --compressed"
        out = os.popen("%s --fail --silent --cert %s --key %s %s %s %s --url '%s/cgi-bin/expand.py?%s;flags=%s;with_dest=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, path_list, server_flags, destinations), "r")
        lines = out.readlines()
        status = out.close()
        server_status = lines[0].strip()
        list = []
        for line in lines[1:]:
            line = line.strip()
            if line:
                list.append(line)
        return server_status, status, list

# end expand_name

def cancel_job(job_id):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl "
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/canceljob.py?job_id=%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, job_id, server_flags)) 
        return status >> 8

# end cancel_job

def cat_file(path):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl --compressed"
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/cat.py?%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, path, server_flags))
        return status >> 8

# end cat_file

def show_doc(search, show):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl --compressed"
        status = os.system("%s --fail --silent --cert %s --key %s %s %s %s --url '%s/cgi-bin/docs.py?search=%s;show=%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, search, show, server_flags)) 
        return status >> 8

# end show_doc

def get_file(src_path, dst_path):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl --compressed --create-dirs"
        status = os.system("%s --fail --silent --cert %s --key %s %s %s %s --output %s --url '%s/cert_redirect/%s'" % (curl, cert_file, key_file, ca_check, password_check, timeout, dst_path, mig_server, src_path)) 
        return status >> 8

# end get_file

def head_file(lines, path):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl --compressed"
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/head.py?%s;lines=%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, path, lines, server_flags))
        return status >> 8

# end head_file

def ls_file(path_list):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

	import StringIO

        curl = 'curl --compressed'
        request = 'with_html=false;flags=%s;%s' % (server_flags, path_list) 
	execution = os.popen("%s --fail --silent --cert %s --key %s %s %s %s --url '%s/cgi-bin/ls.py?%s'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, request), 'r', 0)
	out = execution.readlines()
        execution.close()

	return out

# end ls_file

def mk_dir(path):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl "
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/mkdir.py?path=%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, path, server_flags)) 
        return status >> 8

# end mk_dir

def mv_file(src_list, dst):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

	import StringIO

        curl = 'curl --compressed'
        request = 'with_html=false;flags=%s;dst=%s;%s' % (server_flags, dst, src_list) 
	execution = os.popen("%s --fail --silent --cert %s --key %s %s %s %s --url '%s/cgi-bin/mv.py?%s'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, request), 'r', 0)
	out = execution.readlines()
        execution.close()

	return out

# end mv_file

def put_file(src_path, dst_path, submit_mrsl, extract_package):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

	content_type = ""
	if submit_mrsl and extract_package:
	   content_type = "Content-Type: submitandextract"
        elif submit_mrsl:
	   content_type = "Content-Type: submitmrsl"
        elif extract_package:
	   content_type = "Content-Type: extractpackage"

        curl = "curl --compressed"
        status = os.system("%s --fail --header '%s' --cert %s --key %s %s %s %s --upload-file %s --url '%s/%s'" % (curl, content_type, cert_file, key_file, ca_check, password_check, timeout, src_path, mig_server, dst_path)) 
        return status >> 8

# end put_file

def rm_file(path_list):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl "
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/rm.py?%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, path_list, server_flags)) 
        return status >> 8

# end rm_file

def rm_dir(path):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl "
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/rmdir.py?path=%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, path, server_flags))
        return status >> 8

# end rm_dir

def stat_file(path_list):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

	import StringIO

        curl = 'curl --compressed'
        request = 'with_html=false;flags=%s;%s' % (server_flags, path_list) 
	execution = os.popen("%s --fail --silent --cert %s --key %s %s %s %s --url '%s/cgi-bin/stat.py?%s'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, request), 'r', 0)
	out = execution.readlines()
        execution.close()

	return out

# end stat_file

def job_status(job_id):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        if not max_job_count:
           max_jobs = ''
        else:
           max_jobs = "max_jobs=%s" % (max_job_count)

        curl = "curl --compressed"
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/jobstatus.py?job_id=%s;flags=%s;%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, job_id, server_flags, max_jobs)) 
        return status >> 8

# end job_status

def put_file(src_path, dst_path, submit_mrsl, extract_package):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

	content_type = ""
	if submit_mrsl and extract_package:
	   content_type = "Content-Type: submitandextract"
        elif submit_mrsl:
	   content_type = "Content-Type: submitmrsl"
        elif extract_package:
	   content_type = "Content-Type: extractpackage"

        curl = "curl "
        status = os.system("%s --fail --header '%s' --cert %s --key %s %s %s %s --upload-file %s --url '%s/%s'" % (curl, content_type, cert_file, key_file, ca_check, password_check, timeout, src_path, mig_server, dst_path)) 
        return status >> 8

# end put_file

def tail_file(lines, path):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl --compressed"
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/tail.py?%s;lines=%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, path, lines, server_flags)) 
        return status >> 8

# end tail_file

def touch_file(path_list):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl "
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/touch.py?%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, path_list, server_flags))
        return status >> 8

# end touch_file

def truncate_file(size, path):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl --compressed"
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/truncate.py?%s;size=%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, path, size, server_flags)) 
        return status >> 8

# end truncate_file

def wc_file(path_list):

        if not ca_cert_file:
           ca_check = '--insecure'
        else:
           ca_check = "--cacert %s" % (ca_cert_file)

        if not password:
           password_check = ''
        else:
           password_check = "--pass %s" % (password)

        timeout = ''
        if max_time:
           timeout += "--max-time %s" % (max_time)
        if connect_timeout:
           timeout += " --connect-timeout %s" % (connect_timeout)

        curl = "curl "
        status = os.system("%s --fail --cert %s --key %s %s %s %s --url '%s/cgi-bin/wc.py?%s;flags=%s;with_html=false'" % (curl, cert_file, key_file, ca_check, password_check, timeout, mig_server, path_list, server_flags))
        return status >> 8

# end wc_file


# === Main ===

recursive = 0
verbose = 0
conf = os.path.expanduser("~/.mig/miguser.conf")
flags = ""
mig_server = ""
server_flags = ""

if not os.path.isfile(conf):
   print "Failed to read configuration file: %s" % (conf)
   sys.exit(1)

if verbose:
    print "using configuration in %s" % (conf)

if not mig_server:
   mig_server = read_conf(conf, 'migserver')

cert_file = read_conf(conf, 'certfile')
key_file = read_conf(conf, 'keyfile')
ca_cert_file = read_conf(conf, 'cacertfile')
password = read_conf(conf, 'password')
connect_timeout = read_conf(conf, 'connect_timeout')
max_time = read_conf(conf, 'max_time')

check_var("migserver", mig_server)
check_var("certfile", cert_file)
check_var("keyfile", key_file)
